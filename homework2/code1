// Definirea pinilor pentru afișajul LED
const uint8_t DISP_PIN_A = 12;
const uint8_t DISP_PIN_B = 10;
const uint8_t DISP_PIN_C = 9;
const uint8_t DISP_PIN_D = 8;
const uint8_t DISP_PIN_E = 7;
const uint8_t DISP_PIN_F = 6;
const uint8_t DISP_PIN_G = 5;
const uint8_t DISP_PIN_DP = 4;
const uint8_t DISP_PINS_SIZE = 8;
const uint8_t DISP_PINS[DISP_PINS_SIZE] = {
  DISP_PIN_A,
  DISP_PIN_B,
  DISP_PIN_C,
  DISP_PIN_D,
  DISP_PIN_E,
  DISP_PIN_F,
  DISP_PIN_G,
  DISP_PIN_DP
};

// Definirea indexului pentru fiecare pin al afișajului LED
const uint8_t DISP_PIN_A_INDEX = 0;
const uint8_t DISP_PIN_B_INDEX = 1;
const uint8_t DISP_PIN_C_INDEX = 2;
const uint8_t DISP_PIN_D_INDEX = 3;
const uint8_t DISP_PIN_E_INDEX = 4;
const uint8_t DISP_PIN_F_INDEX = 5;
const uint8_t DISP_PIN_G_INDEX = 6;
const uint8_t DISP_PIN_DP_INDEX = 7;

// Matrice pentru a specifica cum se mută LED-urile în funcție de direcție
int8_t const LED_MOVE_MATRIX[DISP_PINS_SIZE][4] = {
  // {-1, UP, DOWN, LEFT, RIGHT}
  { -1, DISP_PIN_G_INDEX, DISP_PIN_F_INDEX, DISP_PIN_B_INDEX },
  { -1, DISP_PIN_C_INDEX, DISP_PIN_A_INDEX, -1 },
  { DISP_PIN_B_INDEX, -1, DISP_PIN_D_INDEX, DISP_PIN_DP_INDEX },
  { DISP_PIN_G_INDEX, -1, DISP_PIN_E_INDEX, DISP_PIN_C_INDEX },
  { DISP_PIN_F_INDEX, -1, -1, DISP_PIN_D_INDEX },
  { -1, DISP_PIN_E_INDEX, -1, DISP_PIN_A_INDEX },
  { DISP_PIN_A_INDEX, DISP_PIN_D_INDEX, -1, -1 },
  { -1, -1, DISP_PIN_C_INDEX, -1 },
};

// Definirea pinilor pentru joystick
const uint8_t JOYSTICK_X_PIN = A0;
const uint8_t JOYSTICK_Y_PIN = A1;
const uint8_t JOYSTICK_BTN_PIN = 12;

// Alte constante pentru setarea joystick-ului și a afișajului LED
const uint16_t POS_THRESHOLD = 700;
const uint16_t NEG_THRESHOLD = 300;
const uint8_t INPUT_DEBOUNCE_DELAY = 50;
const uint32_t LONG_PRESS_DURATION = 1500;
const uint16_t BLINK_INTERVAL = 500;
const bool AXIS_INVERTED = true;
const byte BTN_PRESSED_STATE = LOW;

// Variabile pentru gestionarea stării joystick-ului și a afișajului LED
bool shouldReadJoystick = true;
int8_t activeAxisPin = -1;
uint8_t currentLedIndex = 0;
byte ledStates[DISP_PINS_SIZE] = { LOW };
bool shouldBlinkState = true;
uint8_t blinkState = LOW;
uint32_t lastBlinkMillis = 0;
bool canMoveLed = true;
byte lastBtnState = HIGH;
byte joystickBtnState = HIGH;
uint32_t lastBtnDebounceTime = 0;
uint32_t joystickBtnPressMillis = 0;

// Enumerație pentru direcția joystick-ului
enum Direction {
  UP,
  DOWN,
  LEFT,
  RIGHT,
  NONE
};

void setupPins() {
  // Setarea pinilor pentru afișajul LED
  for (uint8_t i = 0; i < DISP_PINS_SIZE; i++) {
    pinMode(DISP_PINS[i], OUTPUT);
  }

  // Setarea pinilor pentru joystick
  pinMode(JOYSTICK_X_PIN, INPUT);
  pinMode(JOYSTICK_Y_PIN, INPUT);
  pinMode(JOYSTICK_BTN_PIN, INPUT_PULLUP);
}

// Funcție pentru resetarea stării afișajului LED
void resetDisplayState() {
  for (uint8_t i = 0; i < DISP_PINS_SIZE; i++) {
    ledStates[i] = LOW;
  }

  currentLedIndex = DISP_PIN_DP_INDEX;
  shouldBlinkState = true;
  canMoveLed = true;
}

// Funcție pentru citirea valorii joystick-ului pe un anumit ax
int8_t getJoystickValueOnAxis(uint8_t pin) {
  // Citirea valorii analogice de pe pin
  uint16_t value = analogRead(pin);

  if (
    value < POS_THRESHOLD
    && value > NEG_THRESHOLD
    && activeAxisPin == pin
  ) {
    shouldReadJoystick = true;
    activeAxisPin = -1;
    return 0;
  } else if (value >= POS_THRESHOLD && shouldReadJoystick) {
    shouldReadJoystick = false;
    activeAxisPin = pin;
    return 1;
  } else if (value <= NEG_THRESHOLD && shouldReadJoystick) {
    shouldReadJoystick = false;
    activeAxisPin = pin;
    return -1;
  } else if (!shouldReadJoystick) {
    return -2;
  } else {
    return 0;
  }
}

// Funcție pentru obținerea direcției joystick-ului
Direction getJoystickDirection() {
  int8_t xAxisValue = getJoystickValueOnAxis(JOYSTICK_X_PIN);

  if (xAxisValue == 1) {
    return AXIS_INVERTED ? Direction::UP : Direction::RIGHT;
  } else if (xAxisValue == -1) {
    return AXIS_INVERTED ? Direction::DOWN : Direction::LEFT;
  }

  int8_t yAxisValue = getJoystickValueOnAxis(JOYSTICK_Y_PIN);

  if (yAxisValue == 1) {
    return AXIS_INVERTED ? Direction::RIGHT : Direction::UP;
  } else if (yAxisValue == -1) {
    return AXIS_INVERTED ? Direction::LEFT : Direction::DOWN;
  }

  return Direction::NONE;
}

// Funcție pentru efectuarea clipirii LED-ului
void blinkLed() {
  uint32_t currentMillis = millis();

  if (currentMillis - lastBlinkMillis >= BLINK_INTERVAL) {
    blinkState = !blinkState;
    lastBlinkMillis = currentMillis;
  }
}

// Funcție pentru afișarea stării LED-urilor
void showLedStates() {
  for (uint8_t i = 0; i < DISP_PINS_SIZE; i++) {
    if (i == currentLedIndex && shouldBlinkState) {
      blinkLed();
      digitalWrite(DISP_PINS[i], blinkState);
    } else {
      digitalWrite(DISP_PINS[i], ledStates[i]);
    }
  }
}

// Funcție pentru citirea stării butonului de pe joystick
void readButtonState(void (*onStateChange)(byte, bool), uint8_t notifyOn = CHANGE) {
  byte buttonReading = digitalRead(JOYSTICK_BTN_PIN);
  uint32_t currentMillis = millis();

  if (buttonReading != lastBtnState) {
    lastBtnDebounceTime = currentMillis;
  }

  if (currentMillis - lastBtnDebounceTime > INPUT_DEBOUNCE_DELAY) {
    if (buttonReading != joystickBtnState) {
      joystickBtnState = buttonReading;
      bool isLongPress = false;

      if (joystickBtnState == BTN_PRESSED_STATE) {
        joystickBtnPressMillis = currentMillis;
      } else {
        if (currentMillis - joystickBtnPressMillis >= LONG_PRESS_DURATION) {
          isLongPress = true;
        }

        joystickBtnPressMillis = 0;
      }

      if (
        (notifyOn == CHANGE)
        || (notifyOn == RISING && joystickBtnState == HIGH)
        || (notifyOn == FALLING && joystickBtnState == LOW)
      ) {
        onStateChange(joystickBtnState, isLongPress);
      }
    }
  }

  lastBtnState = buttonReading;
}

// Funcție apelată la schimbarea stării butonului de pe joystick
void onButtonStateChange(byte state, bool isLongPress) {
  if (isLongPress) {
    resetDisplayState();
    return;
  }

  if (canMoveLed) {
    ledStates[currentLedIndex] = blinkState;
  }

  canMoveLed = !canMoveLed;
  shouldBlinkState = !shouldBlinkState;
}

// Funcție pentru mutarea LED-ului în funcție de direcție
void moveCurrentLed(Direction dir) {
  int8_t nextLedIndex = LED_MOVE_MATRIX[currentLedIndex][dir];

  if (nextLedIndex != -1) {
    currentLedIndex = nextLedIndex;
  }
}

// Funcție pentru schimbarea stării LED-ului pe baza mișcării joystick-ului
void changeCurrentLedStateOnJoystickMove(Direction dir) {
  if (dir == Direction::LEFT || dir == Direction::RIGHT) {
    ledStates[currentLedIndex] = !ledStates[currentLedIndex];
  }
}

// Funcție de configurare a pinilor și inițializări inițiale
void setup() {
  setupPins();
  resetDisplayState();
}

// Bucla principală a programului
void loop() {
  showLedStates();
  Direction dir = getJoystickDirection();
  readButtonState(onButtonStateChange, RISING);

  if (dir == Direction::NONE) {
    return;
  }

  if (canMoveLed) {
    moveCurrentLed(dir);
  } else {
    changeCurrentLedStateOnJoystickMove(dir);
  }
}
